<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="$this.Localizable" type="System.Boolean, mscorlib">
    <value>True</value>
  </data>
  <data name="NetSysData_Bodies" xml:space="preserve">
    <value>Bodies</value>
  </data>
  <data name="NetSysData_DiscoveredAll" xml:space="preserve">
    <value>Discovered, {0} bodies</value>
    <comment>{0} int, count of bodies</comment>
  </data>
  <data name="NetSysData_DiscoveredPartial" xml:space="preserve">
    <value>Discovered ({0} of {1})</value>
    <comment>{0} int, count of bodies, {1} int, total count of bodies</comment>
  </data>
  <data name="NetSysData_FC" xml:space="preserve">
    <value>FC</value>
  </data>
  <data name="NetSysData_Genus" xml:space="preserve">
    <value>Genus</value>
  </data>
  <data name="NetSysData_MaterialTrader" xml:space="preserve">
    <value>Material Trader</value>
  </data>
  <data name="NetSysData_Outposts" xml:space="preserve">
    <value>Outposts</value>
  </data>
  <data name="NetSysData_Settlements" xml:space="preserve">
    <value>Settlements</value>
  </data>
  <data name="NetSysData_StarPorts" xml:space="preserve">
    <value>Star ports</value>
  </data>
  <data name="NetSysData_TechBroker" xml:space="preserve">
    <value>Tech Broker</value>
  </data>
  <data name="NetSysData_UndiscoveredSystem" xml:space="preserve">
    <value>Undiscovered system</value>
  </data>
  <data name="NetSysData_UnscannedSystem" xml:space="preserve">
    <value>Unscanned system</value>
  </data>
  <data name="NetSysData_Wars" xml:space="preserve">
    <value>Wars</value>
  </data>
  <data name="PlotGalMap_CountGenus" xml:space="preserve">
    <value>{0}x Genus</value>
  </data>
  <data name="PlotGalMap_Current" xml:space="preserve">
    <value>Current:</value>
  </data>
  <data name="PlotGalMap_DataFrom" xml:space="preserve">
    <value>Data from: EDSM + Spansh + Canonn</value>
    <comment>Dim footer text</comment>
  </data>
  <data name="PlotGalMap_Destination" xml:space="preserve">
    <value>Destination:</value>
  </data>
  <data name="PlotGalMap_DiscoveredBy" xml:space="preserve">
    <value>By {0}, {1}</value>
    <comment>{0} string, name of cmdr, {1} short date</comment>
  </data>
  <data name="PlotGalMap_LastUpdated" xml:space="preserve">
    <value>Last updated: {0}</value>
    <comment>{0} short date</comment>
  </data>
  <data name="PlotGalMap_NextJump" xml:space="preserve">
    <value>Next jump:</value>
  </data>
  <data name="PlotGalMap_NoRouteSet" xml:space="preserve">
    <value>No route set</value>
    <comment>When no route is set.</comment>
  </data>
  <data name="PlotGalMap_RouteFooter" xml:space="preserve">
    <value>Total: ► {0} jumps ► Distance: {1} ly</value>
    <comment>Footer shown summarizing the route. {0} int, count of jumps. {1} float, 1 decimal place, distance travelled.</comment>
  </data>
  <data name="PlotGalMap_Selected" xml:space="preserve">
    <value>Selected:</value>
  </data>
  <data name="PlotSysStatus_BioSignals" xml:space="preserve">
    <value>| {0}x Bio signals on: </value>
    <comment>Appended to prior text. {0} int, count of bodies with bio signals</comment>
  </data>
  <data name="PlotSysStatus_DssRemaining" xml:space="preserve">
    <value> {0}x bodies: </value>
    <comment>May be appended to FssCompleteShort. {0} int, count of bodies worth of scanning.</comment>
  </data>
  <data name="PlotSysStatus_FssCompleteLong" xml:space="preserve">
    <value>FSS {0}% complete</value>
    <comment>Short version, joined with more text. {0} int, percentage number</comment>
  </data>
  <data name="PlotSysStatus_FssCompleteShort" xml:space="preserve">
    <value>FSS {0}%</value>
    <comment>Long version, shown alone. {0} int, percentage number</comment>
  </data>
  <data name="PlotSysStatus_FssNotStarted" xml:space="preserve">
    <value>FSS not started</value>
  </data>
  <data name="PlotSysStatus_Header" xml:space="preserve">
    <value>DSS survey: </value>
    <comment>Header line</comment>
  </data>
  <data name="PlotSysStatus_NextSystem" xml:space="preserve">
    <value>Next system:</value>
  </data>
  <data name="PlotSysStatus_NoDssMeet" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="PlotSysStatus_NonBodySignals" xml:space="preserve">
    <value>► {0} non-body signals</value>
    <comment>{0} int, count of non body signals</comment>
  </data>
  <data name="Settings_CreateFolderNotFound" xml:space="preserve">
    <value>Cannot find folder:
{0}

Would you like to create it?</value>
    <comment>Used in a message box when attempting to open a folder that does not exist.</comment>
  </data>
  <data name="FormBoxelSearch_Disable" xml:space="preserve">
    <value>Disable</value>
    <comment>Used on a button in FormBoxelSearch</comment>
  </data>
  <data name="FormBoxelSearch_Activate" xml:space="preserve">
    <value>Activate</value>
    <comment>Used on a button in FormBoxelSearch</comment>
  </data>
  <data name="FormBoxelSearch_HideList" xml:space="preserve">
    <value>⏶ Hide list</value>
    <comment>Used on a button in FormBoxelSearch</comment>
  </data>
  <data name="FormBoxelSearch_ShowList" xml:space="preserve">
    <value>⏷ Show list</value>
    <comment>Used on a button in FormBoxelSearch</comment>
  </data>
  <data name="FormBoxelSearch_NotViableMessage" xml:space="preserve">
    <value>This is not a boxel generated system name.</value>
    <comment>Shown in FormBoxelSearch when attempting to boxel search a non generated system name</comment>
  </data>
  <data name="FormBoxelSearch_SpanshUpdated" xml:space="preserve">
    <value>Spansh updated: {0}</value>
    <comment>Shown in FormBoxelSearch as notes for a system.
{0} DateTime, a short formatted date</comment>
  </data>
  <data name="FormBoxelSearch_SpanshUpdatedBodies" xml:space="preserve">
    <value>Spansh updated: {0}, bodies: {1}</value>
    <comment>Shown in FormBoxelSearch as notes for a system.
{0} DateTime, a short formatted date
{1} int, a count of bodies in that system</comment>
  </data>
  <data name="FormBoxelSearch_UndiscoveredSystem" xml:space="preserve">
    <value>Undiscovered system</value>
    <comment>Shown in FormBoxelSearch as notes for a system that has not been discovered</comment>
  </data>
  <data name="FormBoxelSearch_Visited" xml:space="preserve">
    <value>Visited: {0}</value>
    <comment>Shown in FormBoxelSearch as notes for a system that was just visited
{0} DateTime, the date and time the system was visited, usually now</comment>
  </data>
  <data name="FormBoxelSearch_SearchNotActive" xml:space="preserve">
    <value>Boxel search is not active.</value>
    <comment>Shown in FormBoxelSearch status var when the feature is not active</comment>
  </data>
  <data name="FormBoxelSearch_VisitedCounts" xml:space="preserve">
    <value>Completed {2} of {3} boxels, {0} of {1} systems in current boxel</value>
    <comment>Shown in FormBoxelSearch status bar, summarizing how many systems have been visited
{0} int, count of systems visited
{1} int, total count of systems to be visited
{2} int, count of boxels searched
{3} int, total count of boxels to be searched</comment>
  </data>
  <data name="NetSysData_Encoded" xml:space="preserve">
    <value>(Encoded)</value>
    <comment>An Encoded Material Trader</comment>
  </data>
  <data name="NetSysData_GuardianBroker" xml:space="preserve">
    <value>(Guardian)</value>
    <comment>A Guardian Tech Broker</comment>
  </data>
  <data name="NetSysData_HumanBroker" xml:space="preserve">
    <value>(Human)</value>
    <comment>A Human Tech Broker</comment>
  </data>
  <data name="NetSysData_Manufactured" xml:space="preserve">
    <value>(Manufactured)</value>
    <comment>A Manufactured Material Trader</comment>
  </data>
  <data name="NetSysData_Raw" xml:space="preserve">
    <value>(Raw)</value>
    <comment>A Raw Material Trader</comment>
  </data>
  <data name="NetSysData_Engineer" xml:space="preserve">
    <value>(Engineer)</value>
    <comment>Suffix after an Engineer's name</comment>
  </data>
</root>